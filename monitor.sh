#!/bin/bash

# Script de monitoramento para Valdigley Jericoacoara
# Uso: ./monitor.sh [opcao]
# Op√ß√µes: status, logs, resources, all

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

PROJECT_NAME="valdigley-jericoacoara"
PROJECT_DIR="/var/www/$PROJECT_NAME"

print_header() {
    echo -e "${BLUE}=================================="
    echo -e "üìä $1"
    echo -e "==================================${NC}"
}

print_section() {
    echo -e "\n${YELLOW}$1${NC}"
    echo "-------------------"
}

# Status dos servi√ßos
check_services() {
    print_header "STATUS DOS SERVI√áOS"
    
    # Nginx
    print_section "üåê Nginx"
    if systemctl is-active --quiet nginx; then
        echo -e "${GREEN}‚úÖ Nginx est√° rodando${NC}"
        echo "Configura√ß√£o: $(nginx -t 2>&1 | grep -o 'successful' || echo 'com problemas')"
    else
        echo -e "${RED}‚ùå Nginx n√£o est√° rodando${NC}"
    fi
    
    # PM2
    print_section "üîÑ PM2"
    if command -v pm2 &> /dev/null; then
        pm2 status 2>/dev/null || echo "PM2 n√£o tem processos rodando"
    else
        echo "PM2 n√£o est√° instalado"
    fi
    
    # Docker
    print_section "üê≥ Docker"
    if command -v docker &> /dev/null; then
        if docker-compose ps 2>/dev/null | grep -q "Up"; then
            echo -e "${GREEN}‚úÖ Containers Docker rodando${NC}"
            docker-compose ps
        else
            echo "Nenhum container Docker rodando"
        fi
    else
        echo "Docker n√£o est√° instalado"
    fi
    
    # Portas
    print_section "üîå Portas em Uso"
    echo "Porta 80 (HTTP):"
    sudo netstat -tlnp | grep :80 || echo "Porta 80 livre"
    echo "Porta 443 (HTTPS):"
    sudo netstat -tlnp | grep :443 || echo "Porta 443 livre"
    echo "Porta 3000 (Node):"
    sudo netstat -tlnp | grep :3000 || echo "Porta 3000 livre"
}

# Logs do sistema
check_logs() {
    print_header "LOGS DO SISTEMA"
    
    # Nginx Access Logs
    print_section "üìù Nginx - √öltimos Acessos"
    if [ -f /var/log/nginx/access.log ]; then
        tail -n 10 /var/log/nginx/access.log
    else
        echo "Log de acesso n√£o encontrado"
    fi
    
    # Nginx Error Logs
    print_section "‚ùå Nginx - √öltimos Erros"
    if [ -f /var/log/nginx/error.log ]; then
        tail -n 10 /var/log/nginx/error.log
    else
        echo "Log de erro n√£o encontrado"
    fi
    
    # PM2 Logs
    print_section "üîÑ PM2 - Logs"
    if command -v pm2 &> /dev/null; then
        pm2 logs --lines 10 2>/dev/null || echo "Nenhum log PM2 dispon√≠vel"
    fi
    
    # Docker Logs
    print_section "üê≥ Docker - Logs"
    if command -v docker-compose &> /dev/null; then
        docker-compose logs --tail=10 2>/dev/null || echo "Nenhum log Docker dispon√≠vel"
    fi
    
    # System Logs
    print_section "üñ•Ô∏è Sistema - √öltimos Erros"
    journalctl -u nginx --lines=5 --no-pager 2>/dev/null || echo "Logs do sistema n√£o dispon√≠veis"
}

# Recursos do sistema
check_resources() {
    print_header "RECURSOS DO SISTEMA"
    
    # CPU e Mem√≥ria
    print_section "üíæ Mem√≥ria"
    free -h
    
    print_section "üíΩ Disco"
    df -h /var/www 2>/dev/null || df -h /
    
    print_section "‚ö° CPU"
    top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//' | awk '{print "Uso da CPU: " $1 "%"}'
    
    # Processos relacionados
    print_section "üîç Processos Relacionados"
    echo "Nginx:"
    ps aux | grep nginx | grep -v grep || echo "Nenhum processo nginx"
    echo -e "\nNode.js:"
    ps aux | grep node | grep -v grep || echo "Nenhum processo node"
    echo -e "\nDocker:"
    ps aux | grep docker | grep -v grep | head -3 || echo "Nenhum processo docker"
    
    # Conex√µes de rede
    print_section "üåê Conex√µes Ativas"
    echo "Conex√µes HTTP/HTTPS:"
    ss -tuln | grep -E ':80|:443|:3000' || echo "Nenhuma conex√£o nas portas web"
}

# Verifica√ß√£o de sa√∫de
health_check() {
    print_header "VERIFICA√á√ÉO DE SA√öDE"
    
    # Teste de conectividade local
    print_section "üè† Teste Local"
    if curl -s -o /dev/null -w "%{http_code}" http://localhost | grep -q "200"; then
        echo -e "${GREEN}‚úÖ Site respondendo localmente${NC}"
    else
        echo -e "${RED}‚ùå Site n√£o responde localmente${NC}"
    fi
    
    # Teste de arquivos est√°ticos
    print_section "üìÅ Arquivos do Site"
    if [ -d "$PROJECT_DIR" ]; then
        echo "Diret√≥rio do projeto: $PROJECT_DIR"
        echo "Arquivos principais:"
        ls -la $PROJECT_DIR/index.html 2>/dev/null && echo "‚úÖ index.html encontrado" || echo "‚ùå index.html n√£o encontrado"
        ls -la $PROJECT_DIR/assets/ 2>/dev/null && echo "‚úÖ Pasta assets encontrada" || echo "‚ùå Pasta assets n√£o encontrada"
    else
        echo -e "${RED}‚ùå Diret√≥rio do projeto n√£o encontrado: $PROJECT_DIR${NC}"
    fi
    
    # Certificados SSL
    print_section "üîí Certificados SSL"
    if [ -d "/etc/letsencrypt/live" ]; then
        echo "Certificados encontrados:"
        ls /etc/letsencrypt/live/ 2>/dev/null || echo "Nenhum certificado"
    else
        echo "Let's Encrypt n√£o configurado"
    fi
    
    # Configura√ß√£o do Nginx
    print_section "‚öôÔ∏è Configura√ß√£o Nginx"
    if nginx -t 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Configura√ß√£o do Nginx v√°lida${NC}"
    else
        echo -e "${RED}‚ùå Problemas na configura√ß√£o do Nginx${NC}"
        nginx -t
    fi
}

# Relat√≥rio completo
full_report() {
    echo -e "${BLUE}üìä RELAT√ìRIO COMPLETO - $(date)${NC}"
    echo "=================================================="
    
    check_services
    echo -e "\n"
    check_resources
    echo -e "\n"
    health_check
    echo -e "\n"
    check_logs
    
    echo -e "\n${GREEN}üìã RESUMO:${NC}"
    echo "- Site: $(curl -s -o /dev/null -w "%{http_code}" http://localhost 2>/dev/null || echo "Offline")"
    echo "- Nginx: $(systemctl is-active nginx 2>/dev/null || echo "Inativo")"
    echo "- Espa√ßo em disco: $(df -h /var/www 2>/dev/null | tail -1 | awk '{print $4}' || echo "N/A") dispon√≠vel"
    echo "- Mem√≥ria livre: $(free -h | grep Mem | awk '{print $7}')"
}

# Monitoramento em tempo real
live_monitor() {
    print_header "MONITORAMENTO EM TEMPO REAL"
    echo "Pressione Ctrl+C para sair"
    echo ""
    
    while true; do
        clear
        echo -e "${BLUE}üîÑ Atualizando a cada 5 segundos...${NC}"
        echo "√öltima atualiza√ß√£o: $(date)"
        echo ""
        
        # Status r√°pido
        echo -e "${YELLOW}Status dos Servi√ßos:${NC}"
        echo "Nginx: $(systemctl is-active nginx 2>/dev/null || echo "Inativo")"
        if command -v pm2 &> /dev/null; then
            echo "PM2: $(pm2 list 2>/dev/null | grep -c "online" || echo "0") processos online"
        fi
        
        # Recursos
        echo -e "\n${YELLOW}Recursos:${NC}"
        free -h | grep Mem
        df -h /var/www 2>/dev/null | tail -1 || df -h / | tail -1
        
        # √öltimos acessos
        echo -e "\n${YELLOW}√öltimos Acessos:${NC}"
        tail -n 3 /var/log/nginx/access.log 2>/dev/null || echo "Nenhum log dispon√≠vel"
        
        sleep 5
    done
}

# Menu de ajuda
show_help() {
    echo "Script de Monitoramento - Valdigley Jericoacoara"
    echo ""
    echo "Uso: $0 [OP√á√ÉO]"
    echo ""
    echo "Op√ß√µes:"
    echo "  status     Verificar status dos servi√ßos"
    echo "  logs       Mostrar logs do sistema"
    echo "  resources  Mostrar uso de recursos"
    echo "  health     Verifica√ß√£o de sa√∫de completa"
    echo "  all        Relat√≥rio completo"
    echo "  live       Monitoramento em tempo real"
    echo "  help       Mostrar esta ajuda"
    echo ""
    echo "Exemplos:"
    echo "  $0 status"
    echo "  $0 all"
    echo "  $0 live"
}

# Main
main() {
    case "${1:-all}" in
        status)
            check_services
            ;;
        logs)
            check_logs
            ;;
        resources)
            check_resources
            ;;
        health)
            health_check
            ;;
        all)
            full_report
            ;;
        live)
            live_monitor
            ;;
        help|*)
            show_help
            ;;
    esac
}

# Executar fun√ß√£o principal
main "$@"